import type NDArray from "../NDArray";
import { Func_a_out, Func_a_decimals_out } from './kwargs';
import { TypedArrayConstructor } from "../dtypes";
export declare function elementwise<T extends TypedArrayConstructor, T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, func: any, dtype: T, out?: NDArray<T_out>): NDArray<T_out> | NDArray<T>;
export declare const funcs: {
    sign: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    sqrt: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    square: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    exp: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    log: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    log2: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    log10: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    log1p: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    sin: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    cos: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    tan: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    asin: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    acos: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    atan: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    cosh: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    sinh: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    tanh: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    acosh: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    asinh: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    atanh: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    floor: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    ceil: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    isfinite: <T_a_1 extends TypedArrayConstructor, T_out_1 extends TypedArrayConstructor>(A: NDArray<T_a_1>, out?: NDArray<T_out_1>) => NDArray<Uint8ArrayConstructor> | NDArray<T_out_1>;
    isnan: <T_a_1 extends TypedArrayConstructor, T_out_1 extends TypedArrayConstructor>(A: NDArray<T_a_1>, out?: NDArray<T_out_1>) => NDArray<Uint8ArrayConstructor> | NDArray<T_out_1>;
    round: (arr: NDArray, decimals: number, out?: NDArray) => NDArray<Float64ArrayConstructor>;
    negative: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    bitwise_not: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    logical_not: <T_a_1 extends TypedArrayConstructor, T_out_1 extends TypedArrayConstructor>(A: NDArray<T_a_1>, out?: NDArray<T_out_1>) => NDArray<Uint8ArrayConstructor> | NDArray<T_out_1>;
    valueOf: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    abs: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
};
export declare const ops: {
    "~": <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    not: <T_a_1 extends TypedArrayConstructor, T_out_1 extends TypedArrayConstructor>(A: NDArray<T_a_1>, out?: NDArray<T_out_1>) => NDArray<Uint8ArrayConstructor> | NDArray<T_out_1>;
    "+": <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    "-": <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    sign: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    sqrt: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    square: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    exp: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    log: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    log2: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    log10: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    log1p: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    sin: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    cos: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    tan: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    asin: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    acos: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    atan: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    cosh: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    sinh: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    tanh: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    acosh: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    asinh: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    atanh: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    floor: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    ceil: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    isfinite: <T_a_1 extends TypedArrayConstructor, T_out_1 extends TypedArrayConstructor>(A: NDArray<T_a_1>, out?: NDArray<T_out_1>) => NDArray<Uint8ArrayConstructor> | NDArray<T_out_1>;
    isnan: <T_a_1 extends TypedArrayConstructor, T_out_1 extends TypedArrayConstructor>(A: NDArray<T_a_1>, out?: NDArray<T_out_1>) => NDArray<Uint8ArrayConstructor> | NDArray<T_out_1>;
    round: (arr: NDArray, decimals: number, out?: NDArray) => NDArray<Float64ArrayConstructor>;
    negative: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    bitwise_not: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    logical_not: <T_a_1 extends TypedArrayConstructor, T_out_1 extends TypedArrayConstructor>(A: NDArray<T_a_1>, out?: NDArray<T_out_1>) => NDArray<Uint8ArrayConstructor> | NDArray<T_out_1>;
    valueOf: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
    abs: <T_a extends TypedArrayConstructor, T_out extends TypedArrayConstructor>(A: NDArray<T_a>, out?: NDArray<T_out>) => NDArray<Float64ArrayConstructor> | NDArray<T_out>;
};
export declare const kw_funcs: {
    sign: Func_a_out.Wrapper;
    sqrt: Func_a_out.Wrapper;
    square: Func_a_out.Wrapper;
    exp: Func_a_out.Wrapper;
    log: Func_a_out.Wrapper;
    log2: Func_a_out.Wrapper;
    log10: Func_a_out.Wrapper;
    log1p: Func_a_out.Wrapper;
    sin: Func_a_out.Wrapper;
    cos: Func_a_out.Wrapper;
    tan: Func_a_out.Wrapper;
    asin: Func_a_out.Wrapper;
    acos: Func_a_out.Wrapper;
    atan: Func_a_out.Wrapper;
    cosh: Func_a_out.Wrapper;
    sinh: Func_a_out.Wrapper;
    tanh: Func_a_out.Wrapper;
    acosh: Func_a_out.Wrapper;
    asinh: Func_a_out.Wrapper;
    atanh: Func_a_out.Wrapper;
    floor: Func_a_out.Wrapper;
    ceil: Func_a_out.Wrapper;
    negative: Func_a_out.Wrapper;
    bitwise_not: Func_a_out.Wrapper;
    logical_not: Func_a_out.Wrapper;
    valueOf: Func_a_out.Wrapper;
    abs: Func_a_out.Wrapper;
    isfinite: Func_a_out.Wrapper;
    isnan: Func_a_out.Wrapper;
    round: Func_a_decimals_out.Wrapper;
};
//# sourceMappingURL=elementwise.d.ts.map